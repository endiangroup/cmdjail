name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --timeout=5m

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install ShellSpec
        run: |
          SHELLSPEC_VERSION=0.28.1
          curl -fsSL https://git.io/shellspec | sh -s ${SHELLSPEC_VERSION} --yes
          shellspec --version

      - name: Run Unit Tests
        run: make test-units

      - name: Run Feature Tests
        run: make test-features

      - name: Run Fuzz Tests
        run: make test-fuzz FUZZ_TIME=10s # Shorter duration for CI

  create_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            See commit history for changes.
          draft: false
          prerelease: false

  build_and_upload_release_assets:
    name: Build and Upload Release Assets
    if: startsWith(github.ref, 'refs/tags/v')
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64, 386, arm]
        exclude:
          - goos: darmin
            goarch: 386
          - goos: darmin
            goarch: arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        run: make build GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Prepare Asset Names
        id: prep_asset
        shell: bash
        run: |
          ARTIFACT_BASENAME="cmdjail-${{ matrix.goos }}-${{ matrix.goarch }}"
          ASSET_FILENAME="${ARTIFACT_BASENAME}"
          # Move the generic build output to the expected asset name
          mv build/cmdjail-${{ matrix.goos }}-${{ matrix.goarch}} build/${ASSET_FILENAME}
          echo "asset_path=build/${ASSET_FILENAME}" >> "$GITHUB_OUTPUT"
          echo "asset_name=${ASSET_FILENAME}" >> "$GITHUB_OUTPUT"

      - name: Upload Release Asset for ${{ matrix.goos }}/${{ matrix.goarch }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prep_asset.outputs.asset_path }}
          asset_name: ${{ steps.prep_asset.outputs.asset_name }}
          asset_content_type: application/octet-stream
